{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template: Launches Honolulu VPC and OpsWork stack",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the bastion host",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern": "[\\x20-\\x7E]*",
      "ConstraintDescription": "can contain only ASCII characters."
    },
    "DBPassword": {
      "Default": "password",
      "NoEcho": "true",
      "Description": "The database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
     "DBUser": {
      "Default": "honolulu",
      "Description": "The database user",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "DBName": {
      "Default": "honoluluanswers",
      "Description": "The database name",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "must contain only alphanumeric characters."
    },
    "SearchifyApiURL": {
      "Default" : "http://:oh5H697EC1TRlc@2zqe.api.searchify.com",
      "Description" : "Prviate Searchify API URL",
      "Type" : "String"
    },
     "SearchifyIndex": {
      "Default" : "hnlgovanswers-dev",
      "Description" : "Searchify Index",
      "Type" : "String"
    }
  },
  "Mappings": {
    "SubnetAZ": {
      "us-east-1": {
        "Public1": "us-east-1c",
        "Private1": "us-east-1c",
        "Private2": "us-east-1d"
      },
      "us-west-1": {
        "Public1": "us-west-1a",
        "Private1": "us-west-1a",
        "Private2": "us-west-1c"
      },
      "us-west-2": {
        "Public1": "us-west-2a",
        "Private1": "us-west-2a",
        "Private2": "us-west-2b"
      },
      "eu-west-1": {
        "Public1": "eu-west-1a",
        "Private1": "eu-west-1a",
        "Private2": "eu-west-1b"
      },
      "ap-southeast-1": {
        "Public1": "ap-southeast-1a",
        "Private1": "ap-southeast-1a",
        "Private2": "ap-southeast-1b"
      },
      "ap-northeast-1": {
        "Public1": "ap-northeast-1a",
        "Private1": "ap-northeast-1a",
        "Private2": "ap-northeast-1b"
      },
      "ap-southeast-2": {
        "Public1": "ap-southeast-2a",
        "Private1": "ap-southeast-2a",
        "Private2": "ap-southeast-2b"
      },
      "sa-east-1": {
        "Public1": "sa-east-1a",
        "Private1": "sa-east-1a",
        "Private2": "sa-east-1b"
      }
    },
    "AWSNATAMI": {
      "us-east-1": {
        "AMI": "ami-224dc94a"
      },
      "us-west-1": {
        "AMI": "ami-838396c6"
      },
      "us-west-2": {
        "AMI": "ami-030f4133"
      },
      "eu-west-1": {
        "AMI": "ami-30913f47"
      },
      "ap-southeast-1": {
        "AMI": "ami-70a38222"
      },
      "ap-southeast-2": {
        "AMI": "ami-39d3be03"
      },
      "ap-northeast-1": {
        "AMI": "ami-11d6e610"
      },
      "sa-east-1": {
        "AMI": "ami-9122968c"
      }
    },
    "SubnetConfig": {
      "VPC": {
        "CIDR": "10.0.0.0/16"
      },
      "Public": {
        "CIDR": "10.0.0.0/24"
      },
      "PrivateA": {
        "CIDR": "10.0.1.0/24"
      },
      "PrivateB": {
        "CIDR": "10.0.2.0/24"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
          "VPC",
          "CIDR"
            ]
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Public"
        }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone" : { "Fn::FindInMap": [ "SubnetAZ", { "Ref" : "AWS::Region" }, "Public1" ] },
        "CidrBlock": {
          "Fn::FindInMap": ["SubnetConfig", "Public", "CIDR"]
        },
        "Tags": [
        {
          "Key": "Stackname",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Name",
          "Value": "Public"
        }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
        {
          "Key": "Application",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Public"
        }
        ]
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Public"
        }
        ]
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "VPCGatewayAttachment",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PublicNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Public"
        }
        ]
      }
    },
    "InboundHTTPPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      }
    },
    "InboundHTTPSPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "101",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      }
    },
    "InboundSSHPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      }
    },
    "InboundEmphemeralPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutboundPublicNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PublicSubnetNetworkAclAssociation": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "PublicNetworkAcl"
        }
      }
    },
    "PrivateSubnetA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : { "Fn::FindInMap": [ "SubnetAZ", { "Ref" : "AWS::Region" }, "Private1" ] },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
          "PrivateA",
          "CIDR"
            ]
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Name",
          "Value": "Private Subnet A"
        }
        ]
      }
    },
    "PrivateSubnetB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone" : { "Fn::FindInMap": [ "SubnetAZ", { "Ref" : "AWS::Region" }, "Private2" ] },
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::FindInMap": [
            "SubnetConfig",
          "PrivateB",
          "CIDR"
            ]
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Name",
          "Value": "Private Subnet B"
        }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Private"
        }
        ]
      }
    },
    "PrivateSubnetRouteTableAssociationA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociationB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "PrivateRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "PrivateNetworkAcl": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
        {
          "Key": "StackName",
          "Value": {
            "Ref": "AWS::StackName"
          }
        },
        {
          "Key": "Network",
          "Value": "Private"
        }
        ]
      }
    },
    "InboundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "OutBoundPrivateNetworkAclEntry": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetA"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "PrivateSubnetNetworkAclAssociationB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnetB"
        },
        "NetworkAclId": {
          "Ref": "PrivateNetworkAcl"
        }
      }
    },
    "NATIPAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "NATDevice"
        }
      }
    },
    "NATDevice": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "InstanceType": "m1.small",
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "SourceDestCheck": "false",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
          {
            "Ref": "AWS::Region"
          },
          "AMI"
            ]
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "SecurityGroupIds": [
        {
          "Ref": "NATSecurityGroup"
        }
        ],
          "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [ { "Ref": "AWS::StackName" }, " - NAT Device" ] ] }
          }
        ]
      }
    },
    "NATSecurityGroup" : {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Enable internal access to the NAT device",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "587", "ToPort": "587", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "5432", "ToPort": "5432", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "9418", "ToPort": "9418", "CidrIp": "0.0.0.0/0"}
        ],
        "SecurityGroupEgress": [
          {"IpProtocol": "tcp", "FromPort": "22", "ToPort": "22", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "80", "ToPort": "80", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "443", "ToPort": "443", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "587", "ToPort": "587", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "5432", "ToPort": "5432", "CidrIp": "0.0.0.0/0"},
          {"IpProtocol": "tcp", "FromPort": "9418", "ToPort": "9418", "CidrIp": "0.0.0.0/0"}
        ]
      }
    },
    "BastionIPAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc",
        "InstanceId": {
          "Ref": "BastionHost"
        }
      }
    },
    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {
            "commands" : {
              "00-security-update" : {
                 "command" : "yum -y update --security",
                 "ignoreErrors" : "true"
              }
            }
          }
        }
      },
      "Properties": {
        "KeyName": {
          "Ref": "KeyName"
        },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSNATAMI",
            { "Ref": "AWS::Region" },
            "AMI"
          ]
        },
        "InstanceType": "t1.micro",
        "SecurityGroupIds": [
          { "Ref": "BastionSecurityGroup" }
        ],
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {"Fn::Join": ["", [ { "Ref": "AWS::StackName" }, " - Bastion Host" ] ] }
          }
        ],
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "yum update -y aws-cfn-bootstrap\n",
          "/opt/aws/bin/cfn-init -v -s ", { "Ref" : "AWS::StackId" }, " -r BastionHost ",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "/opt/aws/bin/cfn-signal -e $? '", { "Ref" : "BastionWaitHandle" }, "'\n"
        ]]}}
      }
    },
    "BastionSecurityGroup": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable internal access to the NAT device",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ],
        "SecurityGroupEgress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ]
      }
    },
    "BastionWaitCondition": {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "BastionHost",
      "Properties" : {
        "Handle" : {"Ref" : "BastionWaitHandle"},
        "Timeout" : "2400"
      }
    },
    "BastionWaitHandle": {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },
    "User" : {
      "Type" : "AWS::IAM::User",
      "Properties" : {
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": { "Statement":[{
            "Effect":"Allow",
            "Action":"*",
            "Resource":"*"
          }]}
        }]
      }
    },
     "HostKeys" : {
      "Type" : "AWS::IAM::AccessKey",
      "Properties" : {
        "UserName" : { "Ref": "User" }
      }
    },

    "DBSubnetGroup" : {
      "Type" : "AWS::RDS::DBSubnetGroup",
      "Properties" : {
        "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
        "SubnetIds" : [{ "Ref" : "PrivateSubnetA" },  { "Ref" : "PrivateSubnetB" }]
      }
    },
    "DBInstance": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBName": { "Ref": "DBName" },
        "DBSubnetGroupName": { "Ref" : "DBSubnetGroup"},
        "Engine": "postgres",
        "MultiAZ" : true,
        "MasterUsername": { "Ref" : "DBUser"},
        "DBInstanceClass": "db.t1.micro",
        "VPCSecurityGroups": [ { "Ref": "DBSecurityGroup" }, { "Ref" : "HonoluluAnswersSecurityGroup"} ],
        "AllocatedStorage": "5",
        "MasterUserPassword": { "Ref": "DBPassword" }
      }
    },
    "DBSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Security group for the Honolulu Answers RDS instance",
            "SecurityGroupIngress": [
                {
                    "FromPort" : "1",
                    "ToPort" : "65535",
                    "CidrIp": "0.0.0.0/0",
                    "IpProtocol": "tcp"
                }
            ],
            "VpcId": {
                "Ref": "VPC"
            }
        }
    },
    "HonoluluAnswersSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group that the Honolulu Rails server and RDS server will both be in",
        "VpcId" : { "Ref" : "VPC"}
      }
    },
    "stack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": { "Ref": "AWS::StackName" },
        "VpcId": {
            "Ref": "VPC"
        },
        "DefaultSubnetId": {
            "Ref": "PrivateSubnetA"
        },
        "ServiceRoleArn": { "Fn::GetAtt": [ "OpsWorksServiceRole", "Arn" ] },
        "DefaultInstanceProfileArn": { "Fn::GetAtt": [ "OpsWorksInstanceProfile", "Arn" ] },
        "CustomCookbooksSource": {
          "Type": "git",
          "Url": "https://github.com/rajagopalan/honolulu_answers_cookbooks.git"
        },
        "UseCustomCookbooks": "true",
        "CustomJson": {
          "deploy": {
            "honoluluanswers": {
              "database": {
                "adapter": "postgresql",
                "password":  { "Ref": "DBPassword" },
                "username": { "Ref" : "DBUser" },
                "host": { "Fn::GetAtt": ["DBInstance", "Endpoint.Address"] },
                "port": "5432",
                "database": { "Ref" : "DBName" }
              },
              "environment_variables" : {
                "NEW_RELIC_LICENSE_KEY": "dunno",
                "NEW_RELIC_APP_NAME": "dunno",
                "S3_BUCKET": "honolulu-test-bucket",
                "S3_KEY" : { "Ref" : "HostKeys" },
                "S3_SECRET" : {"Fn::GetAtt": ["HostKeys", "SecretAccessKey"]},
                "SEARCHIFY_API_URL" : { "Ref": "SearchifyApiURL" },
                "SEARCHIFY_API_INDEX" : { "Ref": "SearchifyIndex" }
              }
            }
          }
        },
        "DefaultOs": "Ubuntu 12.04 LTS"
      }
    },
    "layer": {
      "Type": "AWS::OpsWorks::Layer",
      "DependsOn": "app",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "rails",
        "Type": "rails-app",
        "Shortname": "rails",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
        "CustomSecurityGroupIds" :  [ { "Ref" : "HonoluluAnswersSecurityGroup" } ],
        "Attributes": {
          "BundlerVersion": "1.3.5",
          "PassengerVersion": "4.0.29",
          "RailsStack": "apache_passenger",
          "RubyVersion": "1.9.3",
          "RubygemsVersion": "2.1.11"
        },
        "Packages": [
          "nodejs",
          "sqlite3",
          "git",
          "libxslt1-dev",
          "libxml2-dev",
          "libsasl2-dev",
          "libpq-dev",
          "memcached",
          "build-essential",
          "libsqlite3-dev",
          "libhunspell-1.3-0",
          "gettext",
          "postgresql"
        ],
        "CustomRecipes": {
          "Setup": [ "environment::set_env_variables", "honolulu::workaround" ],
          "Deploy": [ "honolulu::migrate", "honolulu::seed", "honolulu::searchify" ]
        }
      }
    },
    "instance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "layer" } ],
        "InstallUpdatesOnBoot": true,
        "Os" : "Ubuntu 12.04 LTS",
        "InstanceType": "c3.large",
        "RootDeviceType": "ebs",
        "Architecture": "x86_64"
      }
    },
    "app": {
      "Type": "AWS::OpsWorks::App",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "honoluluanswers",
        "Type": "rails",
        "AppSource": {
          "Type": "git",
          "Url": "https://github.com/rajagopalan/honolulu_answers.git"
        },
        "Attributes": {
          "DocumentRoot": "public",
          "RailsEnv" : "development",
          "AutoBundleOnDeploy" : "true"
        }
      }
    },
    "OpsWorksServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "opsworks.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*",
                    "iam:PassRole",
                    "cloudwatch:GetMetricStatistics",
                    "elasticloadbalancing:*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "OpsWorksInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "OpsWorksInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "OpsWorksInstanceRole" } ]
      }
    },
    "ElasticLoadBalancer": {
        "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties": {
            "SecurityGroups": [
                {
                    "Ref": "ELBSecurityGroup"
                }
            ],
            "Subnets": [
                {
                    "Ref": "PublicSubnet"
                }
            ],
            "Listeners": [
                {
                    "LoadBalancerPort": "80",
                    "InstancePort": "80",
                    "Protocol": "TCP"
                }
            ],
            "HealthCheck": {
                "Target": "TCP:80",
                "HealthyThreshold": "3",
                "UnhealthyThreshold": "5",
                "Interval": "90",
                "Timeout": "60"
            }
        }

    },
    "ELBSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Allow inbound access to the ELB",
            "VpcId": {
                "Ref": "VPC"
            },
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "0.0.0.0/0"
                }
            ],
            "SecurityGroupEgress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "0.0.0.0/0"
                }
            ]
        }
    },
    "LoadBalancerAttachment": {
        "Type": "AWS::OpsWorks::ElasticLoadBalancerAttachment",
        "Properties": {
            "ElasticLoadBalancerName": {
                "Ref": "ElasticLoadBalancer"
            },
            "LayerId": {
                "Ref": "layer"
            }
        }
    }
  },
  "Outputs": {
    "StackId": {
      "Value": {
        "Ref": "stack"
      }
    },
    "AppId": {
      "Value": {
        "Ref": "app"
      }
    },
    "VPC": {
      "Value": {
        "Ref": "VPC"
      }
    },
    "PublicSubnet": {
      "Value": {
        "Ref": "PublicSubnet"
      }
    },
    "PrivateSubnetA": {
      "Value": {
        "Ref": "PrivateSubnetA"
      }
    },
    "PrivateSubnetB": {
      "Value": {
        "Ref": "PrivateSubnetB"
      }
    }
  }
}
